// FIND THE DIFFERENCE

/*  PROBLEM:
    Given two strings s and t which consist of only lowercase letters.
    String t is generated by random shuffling string s and then add one more letter at a random position.
    Find the letter that was added in t.
*/

/*  EXAMPLE:

    Input: s = "abcd", t = "abcde"
    Output: e
    Explanation: 'e' is the letter that was added.
*/

/*  APPROACH 1: Two-Pass Hash Map - O(n)
    1. Initialize a hash map to store the frequency of each letter in the string.
    2. Traverse the first string and increment the count for each occurrence of a letter in the hash map.
    3. Traverse the second string and decrement the count of a letter if it is already found in the hash map.
    4. The element which is not found in the first string will have a count of -1 at the end of the second pass.
*/

// SOLUTION 1:
#include <bits/stdc++.h>

using namespace std;

class Solution {
public:
    char findTheDifference(string s, string t) {
        unordered_map<char, int> m;
        char ch;
        // Increment the count for each occurrence of a letter
        for(int i = 0; s[i] != '\0'; i++) {
            m[s[i]]++;
        }
        // Decrement the count for each occurrence of an existing letter in the map
        for(int i = 0; t[i] != '\0'; i++) {
            m[t[i]]--;
        }
        // Find the element with a count of -1
        for(auto i : m) {
            if(i.second == -1) {
                return i.first;
                break;
            }
        }
        return ' ';
    }
};

/*  APPROACH 2: Bit Manipulation - O(n)
    1. Initialize a variable to store the XOR value.
    2. Calculate the cumulative XOR value of each character in both strings.
    3. The XOR of each repeating character will become 0 and the remaining value will be unique.
*/

// SOLUTION 2:
class Solution {
public:
    char findTheDifference(string s, string t) {
        char xor_ch = 0;
        // XOR of each character in string s
        for(auto ch : s) {
            xor_ch ^= ch;
        }
        // XOR of each character in string t
        for(auto ch : t) {
            xor_ch ^= ch;
        }
        // Remaining value will not become 0 when XOR-ed
        return xor_ch;
    }
};
